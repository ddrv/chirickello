openapi: 3.0.3
info:
  title: Chirickello
  description: description
  contact:
    name: Ivan Dudarev
    email: ivan@ddrv.ru
    url: https://ddrv.ru
  license:
    name: proprietary
  version: 0.9.0
servers:
  - url: /api/v1
    description: This server
tags:
  - name: dashboard
    description: Dashboard
paths:
  /dashboard/tasks:
    get:
      operationId: getAllowedTasks
      security:
        - oauth2: [tasks]
      tags:
        - dashboard
      parameters:
        - $ref: '#/components/parameters/paginator'
      responses:
        200:
          description: ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/taskListByPage'
        401:
          $ref: '#/components/responses/needAuthorization'
        403:
          $ref: '#/components/responses/forbidden'
    post:
      operationId: createTask
      security:
        - oauth2: [tasks]
      tags:
        - dashboard
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/taskInput'
      responses:
        201:
          description: taskCreated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/task'
        401:
          $ref: '#/components/responses/needAuthorization'
        403:
          $ref: '#/components/responses/forbidden'
        422:
          $ref: '#/components/responses/formErrors'
        500:
          $ref: '#/components/responses/serverError'
  /dashboard/tasks/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      operationId: getTask
      security:
        - oauth2: [tasks]
      tags:
        - dashboard
      responses:
        200:
          description: task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/task'
        401:
          $ref: '#/components/responses/needAuthorization'
        403:
          $ref: '#/components/responses/forbidden'
        404:
          $ref: '#/components/responses/notFound'
    patch:
      operationId: updateTask
      security:
        - oauth2: [tasks]
      tags:
        - dashboard
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/taskPatch'
      responses:
        200:
          description: task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/task'
        401:
          $ref: '#/components/responses/needAuthorization'
        403:
          $ref: '#/components/responses/forbidden'
        404:
          $ref: '#/components/responses/notFound'
  /dashboard/processes/tasks_shuffle:
    post:
      operationId: shuffleTask
      security:
        - oauth2: [tasks]
      tags:
        - dashboard
      responses:
        201:
          description: TasksShuffled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/result'
        401:
          $ref: '#/components/responses/needAuthorization'
        403:
          $ref: '#/components/responses/forbidden'
        500:
          $ref: '#/components/responses/serverError'
components:
  securitySchemes:
    oauth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: http://localhost:8089/oauth/v2/authorize
          tokenUrl: http://localhost:8089/oauth/v2/token
          scopes:
            tasks: Manage tasks
            analytics: View Analytics
  parameters:
    paginator:
      in: query
      name: paginator
      description: pagination
      schema:
        type: object
        properties:
          pageNum:
            type: integer
            minimum: 1
            default: 1
          perPage:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
  responses:
    needAuthorization:
      description: need authorization
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/pageError"
    forbidden:
      description: forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/pageError"
    notFound:
      description: not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/pageError"
    formErrors:
      description: form errors
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/formErrors"
    serverError:
      description: serverError
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/pageError"
  schemas:
    login:
      type: string
      pattern: ^([a-z0-9]{1,32}|_unknown_)$
      example: parrot-1
    userId:
      type: string
      format: uuid
    taskId:
      type: string
      format: uuid
    taskTitle:
      type: string
      minLength: 1
      maxLength: 1000
      pattern: "^\[[a-zA-Z]+\-[1-9]([0-9]+)?\]\s*\-\s*.+$"
      example: Выклевать клавишу R
    user:
      type: object
      required: [id, login]
      properties:
        id:
          $ref: '#/components/schemas/userId'
        login:
          $ref: '#/components/schemas/login'
      additionalProperties: false
    taskInput:
      type: object
      required: [title]
      properties:
        title:
          $ref: '#/components/schemas/taskTitle'
      additionalProperties: false
    taskPatch:
      type: object
      required: [ status ]
      properties:
        status:
          type: string
          enum: [ completed ]
      additionalProperties: false
    task:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/taskId'
        title:
          $ref: '#/components/schemas/taskTitle'
        assignedTo:
          $ref: '#/components/schemas/user'
        author:
          $ref: '#/components/schemas/user'
        status:
          type: string
          enum:
            - progress
            - completed
        createdAt:
          type: string
          format: date-time
    pager:
      type: object
      required: [pages]
      properties:
        pages:
          type: integer
          minimum: 0
    taskList:
      type: object
      required: [tasks]
      properties:
        tasks:
          type: array
          items:
            $ref: '#/components/schemas/task'
    taskListByPage:
      allOf:
        - "$ref": '#/components/schemas/taskList'
        - "$ref": '#/components/schemas/pager'
    formError:
      type: object
      properties:
        field:
          type: string
        message:
          type: string
          minLength: 1
    formErrors:
      type: array
      items:
        $ref: "#/components/schemas/formError"
      minItems: 1
    pageError:
      type: object
      properties:
        message:
          type: string
          minLength: 1
    result:
      type: object
      required: [success]
      properties:
        success:
          type: boolean